from datetime import datetime

class FilterModule(object):
    def filters(self):
        """
        Custom Jinja2 filter to convert an array into a dictionary
        with the device name as the key and formatted lastPasswordSet as the value.
        """
        return {
            'ad_to_fact_dict': self.ad_to_fact_dict,
        }

    def ad_to_fact_dict(self, array, key_field, value_field):
        """
        Convert array output into a dictionary with formatted lastPasswordSet.
        If the date is invalid or missing, return 'Not Available'.
        array: List of dictionaries to convert.
        key_field: Field to use as the key in the dictionary.
        value_field: Field to use as the value in the dictionary.
        """
        formatted_dict = {}
        for item in array:
            # Get the value for last password set
            last_password_set = item.get(value_field, None)
            
            if last_password_set:
                try:
                    # Parse the input format (MM/DD/YYYY hh:mm:ss AM/PM)
                    parsed_time = datetime.strptime(last_password_set.strip(), "%m/%d/%Y %I:%M:%S %p")
                    # Convert to ISO format
                    formatted_time = parsed_time.strftime("%Y-%m-%dT%H:%M:%SZ")
                except ValueError:
                    # If invalid, fallback to 'Not Available'
                    formatted_time = "Not Available"
            else:
                formatted_time = "Not Available"

            # Assign to the dictionary with device name as key
            formatted_dict[item[key_field]] = formatted_time
        
        return formatted_dict
